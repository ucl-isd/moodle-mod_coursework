{{!
    This file is part of Moodle - http://moodle.org/
    Moodle is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Moodle is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
}}
{{!
    @template mod_coursework/submissions/filter

    Displays the filter options for the submissions table.

    Example context (json):
    {
        "hasmarkers": true,
        "markerfilter": [
            { "markeridentifier": "marker-1", "markername": "Alice" },
            { "markeridentifier": "marker-2", "markername": "Bob" }
        ],
        "releasemarks": {
            "url": "http://example.com/release"
        }
    }
}}
<form id="filter-form" action="#" method="get">
    <div class="d-flex pb-3">
        {{! Filter options. }}
        <div class="dropdown mr-2">
            <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="filter-submissions" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" aria-label="{{#str}} filtersubmissions, mod_coursework {{/str}}">
            <i class="fa-solid fa-sliders mr-2"></i>
                <span id="filter-button-text-display">
                {{#str}}filter, mod_coursework{{/str}}
                </span>
            </button>

            <div class="dropdown-menu p-4" aria-labelledby="filter-submissions"
            {{^hasmarkers}} style="width: 300px;" {{/hasmarkers}}
            {{#hasmarkers}} style="width: 600px;" {{/hasmarkers}}>
                <div class="row">
                    <div class="col">
                        <h4 class="badge badge-dark">{{#str}}marking, mod_coursework{{/str}}</h4>
                        <div class="pb-1 custom-control custom-checkbox">
                            <input type="checkbox" class="custom-control-input" id="filter-need-marking" data-filter-type="status" data-filter-value="need-marking">
                            <label class="custom-control-label" for="filter-need-marking">{{#str}}need_marking, mod_coursework{{/str}}</label>
                        </div>
                        <div class="pb-1 custom-control custom-checkbox">
                            <input type="checkbox" class="custom-control-input" id="filter-need-agreement" data-filter-type="status" data-filter-value="need-agreement">
                            <label class="custom-control-label" for="filter-need-agreement">{{#str}}need_agreed_mark, mod_coursework{{/str}}</label>
                        </div>
                        <div class="pb-1 custom-control custom-checkbox">
                            <input type="checkbox" class="custom-control-input" id="filter-ready-for-release" data-filter-type="status" data-filter-value="ready-for-release">
                            <label class="custom-control-label" for="filter-ready-for-release">{{#str}}ready_release, mod_coursework{{/str}}</label>
                        </div>

                        <h4 class="badge badge-dark">{{#str}}submission, mod_coursework{{/str}}</h4>
                        <div class="pb-1 custom-control custom-checkbox">
                            <input type="checkbox" class="custom-control-input" id="filter-extension-granted" data-filter-type="status" data-filter-value="extension-granted">
                            <label class="custom-control-label" for="filter-extension-granted">{{#str}}extension_granted, mod_coursework{{/str}}</label>
                        </div>
                        <div class="pb-1 custom-control custom-checkbox">
                            <input type="checkbox" class="custom-control-input" id="filter-flagged-plagiarism" data-filter-type="status" data-filter-value="flagged-for-plagiarism">
                            <label class="custom-control-label" for="filter-flagged-plagiarism">{{#str}}flagged_plagiarism, mod_coursework{{/str}}</label>
                        </div>
                        <div class="pb-1 custom-control custom-checkbox">
                            <input type="checkbox" class="custom-control-input" id="filter-late" data-filter-type="status" data-filter-value="late">
                            <label class="custom-control-label" for="filter-late">{{#str}}submitted_late, mod_coursework{{/str}}</label>
                        </div>
                        <div class="pb-1 custom-control custom-checkbox">
                            <input type="checkbox" class="custom-control-input" id="filter-not-submitted" data-filter-type="status" data-filter-value="not-submitted">
                            <label class="custom-control-label" for="filter-not-submitted">{{#str}}statusnotsubmitted, mod_coursework{{/str}}</label>
                        </div>
                    </div>
                    {{#hasmarkers}}
                    <div class="col-6">
                        <h4 class="badge badge-dark">{{#str}} assessor, mod_coursework {{/str}}</h4>
                        {{#markerfilter}}
                        <div class="pb-1 custom-control custom-checkbox">
                            <input type="checkbox" class="custom-control-input" id="filter-{{markeridentifier}}" data-filter-type="marker" data-filter-value="{{markeridentifier}}">
                            <label class="custom-control-label" for="filter-{{markeridentifier}}">{{markername}}</label>
                        </div>
                        {{/markerfilter}}
                    </div>
                    {{/hasmarkers}}
                </div>
            </div>
        </div>

        {{! Search. }}
        <div class="input-group mr-2" style="width: 250px;">
            <label for="user-search" class="sr-only">{{#str}}search_for_student, mod_coursework{{/str}}</label>
            <input type="search" name="search_query"
                id="user-search" class="form-control"
                aria-controls="filter-display-area table-body-rows"
                aria-describedby="search-instructions"
                placeholder="{{#str}}search_for_student_placeholder, mod_coursework{{/str}}"
            />
            <button class="btn btn-secondary" type="button" id="search-button">
                <i class="fa-solid fa-magnifying-glass" aria-hidden="true"></i>
                <span class="sr-only">{{#str}}search, mod_coursework{{/str}}</span>
            </button>
            <p id="search-instructions" class="sr-only">
                {{#str}}search_instructions, mod_coursework{{/str}}
            </p>
        </div>

        {{! Release marks. }}
        {{#releasemarks}}
        <a id="release-marks-button" href="{{releasemarks.url}}"
                class="btn btn-primary ml-auto"
                data-confirmation="modal"
                data-confirmation-title-str='["confirm"]'
                data-confirmation-content-str='["confirmpublish", "mod_coursework", {"warning": "{{releasemarks.warning}}"}]'
                data-confirmation-yes-button-str='["confirm"]'
                data-confirmation-destination="{{releasemarks.url}}"
        >{{#str}}release_marks, mod_coursework{{/str}}
        </a>
        {{/releasemarks}}
    </div>

    {{! Filter display. }}
    <div id="filter-display-area" class="d-flex align-items-center pb-3" aria-live="polite" aria-atomic="true">
        <div id="record-count-display">
            <strong>0 records</strong>
            <span class="sr-only">
                {{#str}}filters_applied_sr, mod_coursework{{/str}}
            </span>
        </div>
        <ul id="active-filters-list" class="list-inline ml-3 mb-0">
        </ul>
    </div>
</form>

<!-- TODO - this is not in AMD yet till we are happy with the rest of the code. -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    const filter_form = document.getElementById('filter-form');
    const filter_dropdown_button = document.getElementById('filter-submissions'); // Changed ID to match HTML
    const filter_button_text_display = document.getElementById('filter-button-text-display');
    const filter_checkboxes = document.querySelectorAll('.custom-control-input[type="checkbox"][data-filter-type]'); // Updated selector
    const record_count_display = document.getElementById('record-count-display').querySelector('strong');
    const active_filters_list = document.getElementById('active-filters-list');
    const table_rows = document.querySelectorAll('#table-body-rows tr[data-status]');
    const user_search_input = document.getElementById('user-search');
    const search_button = document.getElementById('search-button');

    const SESSION_STORAGE_FILTERS_KEY = 'submission_filters';
    let active_filters = {};
    let current_search_query = '';

    function save_filters_to_session_storage() {
        try {
            sessionStorage.setItem(SESSION_STORAGE_FILTERS_KEY, JSON.stringify(active_filters));
        } catch (e) {
            console.error("Error saving filters to session storage:", e);
        }
    }

    function load_filters_from_session_storage() {
        try {
            const saved_filters_json = sessionStorage.getItem(SESSION_STORAGE_FILTERS_KEY);
            if (saved_filters_json) {
                const loaded_filters = JSON.parse(saved_filters_json);
                if (typeof loaded_filters === 'object' && loaded_filters !== null) {
                    active_filters = loaded_filters;
                }
            }
        } catch (e) {
            console.error("Error loading filters from session storage:", e);
            sessionStorage.removeItem(SESSION_STORAGE_FILTERS_KEY);
        }
    }

    // Renamed function and updated to handle checkbox 'checked' state
    function update_checkbox_states() {
        filter_checkboxes.forEach(checkbox => {
            const filter_type = checkbox.dataset.filterType;
            const filter_value = checkbox.dataset.filterValue;

            const is_active = active_filters[filter_type] &&
                              active_filters[filter_type].some(f => f.value === filter_value);

            checkbox.checked = is_active; // Set checkbox 'checked' property
        });
    }

    function update_dropdown_button_text() {
        let total_active_filters = 0;
        for (const type in active_filters) {
            total_active_filters += active_filters[type].length;
        }

        if (total_active_filters > 0) {
            filter_button_text_display.textContent = '{{#str}} active_filters, mod_coursework {{/str}}' + total_active_filters;
        } else {
            filter_button_text_display.textContent = '{{#str}} filter, mod_coursework {{/str}}';
        }
    }

    function update_record_count() {
        record_count_display.textContent = `${get_visible_row_count()} {{#str}} records, mod_coursework {{/str}}`;
    }

    function update_filter_tags_display() {
        active_filters_list.innerHTML = '';

        let total_active_filter_tags = 0;

        for (const filter_type in active_filters) {
            const filter_values_array = active_filters[filter_type];

            filter_values_array.forEach(filter_info => {
                total_active_filter_tags++;

                const list_item = document.createElement('li');
                list_item.classList.add('list-inline-item');

                const button = document.createElement('button');
                button.classList.add('btn', 'btn-sm', 'btn-light');
                button.textContent = filter_info.label;
                button.innerHTML += ' <i class="fa-solid fa-circle-xmark" aria-hidden="true"></i>';
                button.setAttribute('aria-label', `{{#str}} remove_filter, mod_coursework {{/str}} ${filter_info.label}`);

                button.addEventListener('click', function() {
                    // Logic to remove filter from active_filters
                    const index_to_remove = active_filters[filter_type].findIndex(
                        item => item.value === filter_info.value && item.label === filter_info.label
                    );

                    if (index_to_remove > -1) {
                        active_filters[filter_type].splice(index_to_remove, 1);

                        if (active_filters[filter_type].length === 0) {
                            delete active_filters[filter_type];
                        }
                    }

                    current_search_query = '';
                    user_search_input.value = '';

                    apply_filters_and_search();
                    update_dropdown_button_text();
                    update_filter_tags_display();
                    update_checkbox_states(); // Call updated function
                    save_filters_to_session_storage();
                });

                list_item.appendChild(button);
                active_filters_list.appendChild(list_item);
            });
        }

        if (total_active_filter_tags > 0) {
            const reset_list_item = document.createElement('li');
            reset_list_item.classList.add('list-inline-item');

            const reset_button = document.createElement('input');
            reset_button.setAttribute('type', 'reset');
            reset_button.classList.add('btn', 'btn-sm', 'btn-warning');
            reset_button.setAttribute('value', '{{#str}}reset_filters, mod_coursework{{/str}}');
            reset_button.setAttribute('aria-label', '{{#str}}reset_all_filters, mod_coursework{{/str}}');

            reset_list_item.appendChild(reset_button);
            active_filters_list.appendChild(reset_list_item);
        }
    }

    function apply_filters_and_search() {
        let visible_rows_count = 0;
        const query_lower = current_search_query.toLowerCase().trim();

        table_rows.forEach(row => {
            let row_is_visible = true;

            // Apply search first (if active)
            if (query_lower !== '') {
                const student_column_text = row.querySelector('td:first-child').textContent.toLowerCase();
                if (!student_column_text.includes(query_lower)) {
                    row_is_visible = false;
                }
            } else { // Only apply filters if no search query is active
                for (const filter_type in active_filters) {
                    const filter_values_array = active_filters[filter_type];

                    if (filter_values_array.length === 0) {
                        continue;
                    }

                    let row_data_value_str = row.dataset[filter_type];
                    let row_data_values_arr = [];

                    if (row_data_value_str) {
                        row_data_values_arr = row_data_value_str.split(',').map(s => s.trim());
                    }

                    const matches_all_selected_values_for_this_type = filter_values_array.every(filter_info =>
                        row_data_values_arr.includes(filter_info.value)
                    );

                    if (!matches_all_selected_values_for_this_type) {
                        row_is_visible = false;
                        break;
                    }
                }
            }

            if (row_is_visible) {
                row.style.display = '';
                visible_rows_count++;
            } else {
                row.style.display = 'none';
            }
        });

        record_count_display.textContent = `${get_visible_row_count()} {{#str}} records, mod_coursework {{/str}}`;

        const announcement_text = query_lower !== ''
            ? `{{#str}}search_results_found, mod_coursework{{/str}}`.replace('{$a->count}', visible_rows_count.toString()).replace('{$a->query}', current_search_query)
            : (visible_rows_count === table_rows.length && Object.keys(active_filters).length === 0
                ? '{{#str}}all_records_displayed, mod_coursework{{/str}}'
                : `${visible_rows_count} {{#str}}records_displayed_with_filters, mod_coursework{{/str}}`);

        const live_region_div = document.getElementById('filter-display-area');
        let existing_sr_only_announcement = live_region_div.querySelector('.sr-only.results-announcement');

        if (!existing_sr_only_announcement) {
            existing_sr_only_announcement = document.createElement('div');
            existing_sr_only_announcement.classList.add('sr-only', 'results-announcement');
            live_region_div.appendChild(existing_sr_only_announcement);
        }

        existing_sr_only_announcement.textContent = announcement_text;

        setTimeout(() => {
            if (existing_sr_only_announcement) {
                existing_sr_only_announcement.remove();
            }
        }, 2000);
    }

    function get_visible_row_count() {
        let count = 0;
        table_rows.forEach(row => {
            if (row.style.display !== 'none') {
                count++;
            }
        });
        return count;
    }


    // --- Event Listeners ---

    // Listen for 'change' event on checkboxes instead of 'click' on buttons
    filter_checkboxes.forEach(checkbox => {
        checkbox.addEventListener('change', function() { // Listen for 'change' event
            // No need for event.preventDefault() for checkboxes
            current_search_query = '';
            user_search_input.value = '';

            const filter_type = this.dataset.filterType;
            const filter_value = this.dataset.filterValue;
            const filter_label = this.nextElementSibling.textContent.trim(); // Get label from the <label> element
            const is_checked = this.checked; // Get current checked state

            if (!active_filters[filter_type]) {
                active_filters[filter_type] = [];
            }

            if (is_checked) {
                // Add filter if checked and not already present
                const is_already_selected = active_filters[filter_type].some(
                    f => f.value === filter_value && f.label === filter_label
                );
                if (!is_already_selected) {
                    active_filters[filter_type].push({
                        value: filter_value,
                        label: filter_label
                    });
                }
            } else {
                // Remove filter if unchecked
                active_filters[filter_type] = active_filters[filter_type].filter(
                    f => !(f.value === filter_value && f.label === filter_label)
                );
                if (active_filters[filter_type].length === 0) {
                    delete active_filters[filter_type];
                }
            }

            apply_filters_and_search();
            update_dropdown_button_text();
            update_filter_tags_display();
            update_checkbox_states(); // Ensure all checkboxes reflect current state
            save_filters_to_session_storage();
        });
    });

    filter_form.addEventListener('reset', function(event) {
        event.preventDefault();

        active_filters = {};
        current_search_query = '';
        user_search_input.value = '';

        update_dropdown_button_text();
        update_filter_tags_display();
        update_checkbox_states(); // Update checkbox states on reset
        sessionStorage.removeItem(SESSION_STORAGE_FILTERS_KEY);

        apply_filters_and_search();

        const live_region_div = document.getElementById('filter-display-area');
        let existing_sr_only_announcement = live_region_div.querySelector('.sr-only.results-announcement');
        if (!existing_sr_only_announcement) {
            existing_sr_only_announcement = document.createElement('div');
            existing_sr_only_announcement.classList.add('sr-only', 'results-announcement');
            live_region_div.appendChild(existing_sr_only_announcement);
        }
        existing_sr_only_announcement.textContent = '{{#str}}all_filters_and_search_reset, mod_coursework{{/str}}';

        setTimeout(() => {
            if (existing_sr_only_announcement) {
                existing_sr_only_announcement.remove();
            }
        }, 1000);
    });

    user_search_input.addEventListener('input', function() {
        current_search_query = this.value;
        active_filters = {}; // Clear filters when typing in search
        sessionStorage.removeItem(SESSION_STORAGE_FILTERS_KEY);
        update_dropdown_button_text();
        update_filter_tags_display();
        update_checkbox_states(); // Update checkbox states

        apply_filters_and_search();
    });

    search_button.addEventListener('click', function() {
        current_search_query = user_search_input.value;
        active_filters = {}; // Clear filters when search button is clicked
        sessionStorage.removeItem(SESSION_STORAGE_FILTERS_KEY);
        update_dropdown_button_text();
        update_filter_tags_display();
        update_checkbox_states(); // Update checkbox states

        apply_filters_and_search();
    });

    user_search_input.addEventListener('keydown', function(event) {
        if (event.key === 'Enter') {
            event.preventDefault();
            this.blur();
            // Optionally, you might want to call search_button.focus() here
        }
    });

    // --- Initial Load ---
    load_filters_from_session_storage();
    update_checkbox_states(); // Call updated function to set initial checkbox states
    apply_filters_and_search();
    update_dropdown_button_text();
    update_filter_tags_display();
});
</script>