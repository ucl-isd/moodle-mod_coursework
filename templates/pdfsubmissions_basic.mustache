<div class="filebuttons">
    {{#pdfs}}
        <button class="btn btn-primary" data-href="{{{href}}}"
                data-action="modcoursework_viewfile">Load file {{filename}}</button>
    {{/pdfs}}
</div>


<div class="pdfcontrols">
    <button class="btn btn-primary"
            data-action="modcoursework_prevpage">prev</button>
    <button class="btn btn-primary"
            data-action="modcoursework_nextpage">Next</button>
</div>

<canvas id="modcoursework_pdfcanvas" class="d-none"></canvas>

<script type="module">
    import * as pdfjsLib from "../../lib/pdfjs/build/pdf.mjs";
    pdfjsLib.GlobalWorkerOptions.workerSrc = '../../lib/pdfjs/build/pdf.worker.mjs';

    var controller = {
        pdf: null,
        currentpagenumber: null,
        loadpdf: async function(url) {
            controller.pdf = await pdfjsLib.getDocument(event.target.dataset.href).promise;
            controller.loadpagenum(1);
        },
        nextpage: async function() {
            if (controller.pdf.numPages == controller.currentpagenumber) {
                return;
            }
            controller.loadpagenum(controller.currentpagenumber+1);
        },
        prevpage: async function() {
            if (controller.currentpagenumber == 1) {
                return;
            }
            controller.loadpagenum(controller.currentpagenumber-1);
        },
        loadpagenum: async function (pagenum) {
            const page = await controller.pdf.getPage(pagenum);

            const scale = 1.5;
            const viewport = page.getViewport({scale});
            // Support HiDPI-screens.
            const outputScale = window.devicePixelRatio || 1;

            //
            // Prepare canvas using PDF page dimensions
            //
            const canvas = document.getElementById("modcoursework_pdfcanvas");
            const context = canvas.getContext("2d");

            canvas.width = Math.floor(viewport.width * outputScale);
            canvas.height = Math.floor(viewport.height * outputScale);
            canvas.style.width = Math.floor(viewport.width) + "px";
            canvas.style.height = Math.floor(viewport.height) + "px";

            const transform = outputScale !== 1
                    ? [outputScale, 0, 0, outputScale, 0, 0]
                    : null;

            //
            // Render PDF page into canvas context
            //
            const renderContext = {
                canvasContext: context,
                transform,
                viewport,
            };
            page.render(renderContext);

            this.currentpagenumber = pagenum;

            modcoursework_pdfcanvas.classList.remove("d-none");
        }
    };

    document.querySelector('[data-action="modcoursework_viewfile"]')
            .addEventListener("click", async (event) => {
                await controller.loadpdf(event.target.dataset.href).promise;
            });

    document.querySelector('[data-action="modcoursework_nextpage"]')
            .addEventListener("click", async (event) => {
                await controller.nextpage();
            });

    document.querySelector('[data-action="modcoursework_prevpage"]')
            .addEventListener("click", async (event) => {
                await controller.prevpage();
            });
</script>
