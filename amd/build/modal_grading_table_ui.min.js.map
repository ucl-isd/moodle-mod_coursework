{"version":3,"file":"modal_grading_table_ui.min.js","sources":["../src/modal_grading_table_ui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript module for changes to grading table after modal form edits.\n *\n * @module      mod_coursework/modal_grading_table_ui\n * @copyright   2025 UCL\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {add as addToast} from 'core/toast';\nimport Ajax from 'core/ajax';\nimport Templates from 'core/templates';\n\n/**\n * Once a row has been changed via modal form, replace it in the UI with fresh data from server.\n * @param {Element} rowElement to replace\n * @param {object} dataSet data we got from the original click\n * @param {string} successMessage\n * @returns {Promise<void>}\n */\nexport const replaceRow = async (rowElement, dataSet, successMessage) => {\n    const templateDataResult = await Ajax.call([{\n        methodname: 'get_grading_table_row_data',\n        args: {\n            courseworkid: dataSet.courseworkId,\n            allocatableid: dataSet.allocatableId,\n            allocatabletype: dataSet.allocatableType\n        }\n    }])[0];\n    if (templateDataResult.success) {\n        const rowHtml = await Templates.render(\n            'mod_coursework/submissions/tr',\n            JSON.parse(templateDataResult.result)\n        );\n        if (rowHtml) {\n            const temp = document.createElement('tr');\n            temp.innerHTML = rowHtml;\n            rowElement.replaceWith(temp);\n            addToast(successMessage, {type: 'success'});\n        } else if (templateDataResult.exception ?? null) {\n            addToast(templateDataResult.exception.message, {type: 'warning'});\n        } else if (templateDataResult.message) {\n            addToast(templateDataResult.message, {type: 'warning'});\n        }\n    }\n};\n"],"names":["async","rowElement","dataSet","successMessage","templateDataResult","Ajax","call","methodname","args","courseworkid","courseworkId","allocatableid","allocatableId","allocatabletype","allocatableType","success","rowHtml","Templates","render","JSON","parse","result","temp","document","createElement","innerHTML","replaceWith","type","exception","message"],"mappings":";;;;;;;8LAkC0BA,MAAOC,WAAYC,QAASC,wBAC5CC,yBAA2BC,cAAKC,KAAK,CAAC,CACxCC,WAAY,6BACZC,KAAM,CACFC,aAAcP,QAAQQ,aACtBC,cAAeT,QAAQU,cACvBC,gBAAiBX,QAAQY,oBAE7B,MACAV,mBAAmBW,QAAS,iCACtBC,cAAgBC,mBAAUC,OAC5B,gCACAC,KAAKC,MAAMhB,mBAAmBiB,YAE9BL,QAAS,OACHM,KAAOC,SAASC,cAAc,MACpCF,KAAKG,UAAYT,QACjBf,WAAWyB,YAAYJ,qBACdnB,eAAgB,CAACwB,KAAM,+CACzBvB,mBAAmBwB,iFACjBxB,mBAAmBwB,UAAUC,QAAS,CAACF,KAAM,YAC/CvB,mBAAmByB,wBACjBzB,mBAAmByB,QAAS,CAACF,KAAM"}