{"version":3,"file":"modal_handler_personal_deadlines.min.js","sources":["../src/modal_handler_personal_deadlines.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript module for handling personal extension modal.\n *\n * @module      mod_coursework/modal_handler_personal_deadlines\n * @copyright   2025 UCL\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalForm from 'core_form/modalform';\nimport Notification from 'core/notification';\nimport {getString} from 'core/str';\nimport Log from 'core/log';\nimport {replaceRow} from 'mod_coursework/modal_grading_table_ui';\n\nlet courseworkId;\n\n/**\n * Initialize module.\n * @param {number} courseworkid the coursework ID.\n */\nexport const init = (courseworkid) => {\n    courseworkId = courseworkid;\n    // Using table not rows as rows will be re-rendered.\n    const tableSelector = `#mod-coursework-submissions-table-${courseworkId}`;\n    const triggerElement = document.querySelector(tableSelector);\n    const actionSelector = '[data-action=\"mod-coursework-launch-modal-personal-deadline\"]';\n    triggerElement.addEventListener('click', event => {\n        const actionMenu = event.srcElement.matches(actionSelector)\n            ? event.srcElement\n            : event.srcElement.closest(actionSelector);\n        const rowElement = event.srcElement.closest('tr');\n        if (actionMenu) {\n            event.preventDefault();\n        } else {\n            // Was not an action menu click.\n            return;\n        }\n        const dataSet = actionMenu.dataset;\n        if (!dataSet.courseworkId ?? null) {\n            // For some reason we do not have the data we need for dynamic form.\n            Log.error('Insufficient data to process personal deadline request.');\n            return;\n        }\n        const args = {\n            courseworkid: courseworkId,\n            allocatableid: dataSet.allocatableId,\n            allocatabletype: dataSet.allocatableType,\n            deadlineid: dataSet.deadlineId\n        };\n        const modalForm = new ModalForm({\n            modalConfig: {\n                title: getString('extended_deadline', 'mod_coursework'),\n            },\n            formClass: 'mod_coursework\\\\forms\\\\personal_deadline_form',\n            saveButtonText: getString('save', 'core'),\n            returnFocus: triggerElement,\n            args: args\n        });\n\n        // Show a toast notification when the form is submitted.\n        modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, event => {\n            if (event.detail.success) {\n                // Successful submission.\n                if (event.detail.resultcode === 'saved') {\n                    try {\n                        replaceRow(rowElement, dataSet, event.detail.message);\n                    } catch (e) {\n                        Notification.addNotification({type: 'error', message: e.message});\n                    }\n                }\n            } else if (event.detail.errors) {\n                Notification.addNotification({\n                    type: 'error',\n                    message: event.detail.errors.join('<br>')\n                });\n            } else if (event.detail.warnings) {\n                const warningMessages = event.detail.warnings.map(warning => warning.message);\n                Notification.addNotification({\n                    type: 'error',\n                    message: warningMessages.join('<br>')\n                });\n            }\n        });\n\n        modalForm.show();\n    });\n};\n"],"names":["courseworkId","courseworkid","tableSelector","triggerElement","document","querySelector","actionSelector","addEventListener","event","actionMenu","srcElement","matches","closest","rowElement","preventDefault","dataSet","dataset","error","args","allocatableid","allocatableId","allocatabletype","allocatableType","deadlineid","deadlineId","modalForm","ModalForm","modalConfig","title","formClass","saveButtonText","returnFocus","events","FORM_SUBMITTED","detail","success","resultcode","message","e","addNotification","type","errors","join","warnings","warningMessages","map","warning","show"],"mappings":";;;;;;;SA6BIA,4OAMiBC,eACjBD,aAAeC,mBAETC,0DAAqDF,cACrDG,eAAiBC,SAASC,cAAcH,eACxCI,eAAiB,gEACvBH,eAAeI,iBAAiB,SAASC,wCAC/BC,WAAaD,MAAME,WAAWC,QAAQL,gBACtCE,MAAME,WACNF,MAAME,WAAWE,QAAQN,gBACzBO,WAAaL,MAAME,WAAWE,QAAQ,UACxCH,kBACAD,MAAMM,uBAKJC,QAAUN,WAAWO,0CACtBD,QAAQf,8FAELiB,MAAM,iEAGRC,KAAO,CACTjB,aAAcD,aACdmB,cAAeJ,QAAQK,cACvBC,gBAAiBN,QAAQO,gBACzBC,WAAYR,QAAQS,YAElBC,UAAY,IAAIC,mBAAU,CAC5BC,YAAa,CACTC,OAAO,kBAAU,oBAAqB,mBAE1CC,UAAW,gDACXC,gBAAgB,kBAAU,OAAQ,QAClCC,YAAa5B,eACbe,KAAMA,OAIVO,UAAUlB,iBAAiBkB,UAAUO,OAAOC,gBAAgBzB,WACpDA,MAAM0B,OAAOC,YAEmB,UAA5B3B,MAAM0B,OAAOE,sDAEEvB,WAAYE,QAASP,MAAM0B,OAAOG,SAC/C,MAAOC,yBACQC,gBAAgB,CAACC,KAAM,QAASH,QAASC,EAAED,gBAG7D,GAAI7B,MAAM0B,OAAOO,6BACPF,gBAAgB,CACzBC,KAAM,QACNH,QAAS7B,MAAM0B,OAAOO,OAAOC,KAAK,eAEnC,GAAIlC,MAAM0B,OAAOS,SAAU,OACxBC,gBAAkBpC,MAAM0B,OAAOS,SAASE,KAAIC,SAAWA,QAAQT,gCACxDE,gBAAgB,CACzBC,KAAM,QACNH,QAASO,gBAAgBF,KAAK,cAK1CjB,UAAUsB"}