{"version":3,"file":"modal_handler_allow_late_submissions.min.js","sources":["../src/modal_handler_allow_late_submissions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript module for handling allow late submissions modal.\n *\n * @module      mod_coursework/modal_handler_extensions\n * @copyright   2025 UCL\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Notification from 'core/notification';\nimport {getStrings} from 'core/str';\nimport {add as addToast} from 'core/toast';\nimport Ajax from 'core/ajax';\nimport {replaceRow} from 'mod_coursework/modal_grading_table_ui';\nimport Log from 'core/log';\n\nlet courseworkId;\n\n/**\n * Initialize module.\n * @param {number} courseworkid the coursework ID.\n */\nexport const init = (courseworkid) => {\n    courseworkId = courseworkid;\n    // Using table not rows as rows will be re-rendered.\n    const tableSelector = `#mod-coursework-submissions-table-${courseworkId}`;\n    const triggerElement = document.querySelector(tableSelector);\n    const actionSelector = '[data-action=\"mod-coursework-launch-modal-allowlatesubmissionsuser\"]';\n    triggerElement.addEventListener('click', event => {\n        const actionMenu = event.target.matches(actionSelector)\n            ? event.target\n            : event.target.closest(actionSelector);\n        const rowElement = event.target.closest('tr');\n        if (actionMenu) {\n            event.preventDefault();\n        } else {\n            // Was not an action menu click.\n            return;\n        }\n        const dataSet = actionMenu.dataset;\n        if (!dataSet.courseworkId ?? null) {\n            // For some reason we do not have the data we need for dynamic form.\n            Log.error('Insufficient data to process request.');\n            return;\n        }\n        const strRequests = [\n            {key: 'yes', component: 'core'},\n            {key: 'no', component: 'core'},\n            {key: 'allowlatesubmissions', component: 'mod_coursework'},\n            {key: 'allowlatesubmissionssure', component: 'mod_coursework'},\n            {key: 'allowlatesubmissionssurerevoke', component: 'mod_coursework'},\n        ];\n        getStrings(strRequests).then((strings) => {\n            Notification.confirm(\n                strings[2],\n                dataSet.lateSubsAllowed === \"1\" ? strings[4] : strings[3],\n                strings[0],\n                strings[1],\n                async () => {\n                    try {\n                        const wsResult = await Ajax.call([{\n                            methodname: 'mod_coursework_allow_late_submissions',\n                            args: {\n                                courseworkid: parseInt(dataSet.courseworkId),\n                                allocatableid: parseInt(dataSet.allocatableId),\n                                allocatabletype: dataSet.allocatableType,\n                                status: dataSet.lateSubsAllowed === \"1\" ? 0 : 1,\n                            }\n                        }])[0];\n                        if (wsResult.success) {\n                            replaceRow(rowElement, dataSet, wsResult.message);\n                        } else if (wsResult.exception ?? null) {\n                            addToast(wsResult.exception.message, {type: 'warning'});\n                        } else if (typeof(wsResult.error ?? null) === 'string') {\n                            addToast(wsResult.error, {type: 'warning'});\n                        }\n                    } catch (e) {\n                        addToast(e.message ?? e.error, {type: 'danger'});\n                    }\n                }\n            );\n        });\n    });\n};\n"],"names":["courseworkId","courseworkid","tableSelector","triggerElement","document","querySelector","actionSelector","addEventListener","event","actionMenu","target","matches","closest","rowElement","preventDefault","dataSet","dataset","error","key","component","then","strings","confirm","lateSubsAllowed","async","wsResult","Ajax","call","methodname","args","parseInt","allocatableid","allocatableId","allocatabletype","allocatableType","status","success","message","exception","type","e"],"mappings":";;;;;;;SA8BIA,kOAMiBC,eACjBD,aAAeC,mBAETC,0DAAqDF,cACrDG,eAAiBC,SAASC,cAAcH,eACxCI,eAAiB,uEACvBH,eAAeI,iBAAiB,SAASC,wCAC/BC,WAAaD,MAAME,OAAOC,QAAQL,gBAClCE,MAAME,OACNF,MAAME,OAAOE,QAAQN,gBACrBO,WAAaL,MAAME,OAAOE,QAAQ,UACpCH,kBACAD,MAAMM,uBAKJC,QAAUN,WAAWO,0CACtBD,QAAQf,8FAELiB,MAAM,6DAGM,CAChB,CAACC,IAAK,MAAOC,UAAW,QACxB,CAACD,IAAK,KAAMC,UAAW,QACvB,CAACD,IAAK,uBAAwBC,UAAW,kBACzC,CAACD,IAAK,2BAA4BC,UAAW,kBAC7C,CAACD,IAAK,iCAAkCC,UAAW,oBAE/BC,MAAMC,gCACbC,QACTD,QAAQ,GACoB,MAA5BN,QAAQQ,gBAA0BF,QAAQ,GAAKA,QAAQ,GACvDA,QAAQ,GACRA,QAAQ,IACRG,4DAEcC,eAAiBC,cAAKC,KAAK,CAAC,CAC9BC,WAAY,wCACZC,KAAM,CACF5B,aAAc6B,SAASf,QAAQf,cAC/B+B,cAAeD,SAASf,QAAQiB,eAChCC,gBAAiBlB,QAAQmB,gBACzBC,OAAoC,MAA5BpB,QAAQQ,gBAA0B,EAAI,MAElD,GACAE,SAASW,+CACEvB,WAAYE,QAASU,SAASY,qCAClCZ,SAASa,6EACPb,SAASa,UAAUD,QAAS,CAACE,KAAM,YACF,yCAA5Bd,SAASR,iDAAS,sBACvBQ,SAASR,MAAO,CAACsB,KAAM,YAEtC,MAAOC,oDACIA,EAAEH,yCAAWG,EAAEvB,MAAO,CAACsB,KAAM"}