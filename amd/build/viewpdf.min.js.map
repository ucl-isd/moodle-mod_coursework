{"version":3,"file":"viewpdf.min.js","sources":["../src/viewpdf.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript module for handling personal extension modal.\n *\n * @module      mod_coursework/viewpdf\n * @copyright   2025 UCL\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport {prefetchStrings} from 'core/prefetch';\nimport {getString} from 'core/str';\nimport {add as addToast} from 'core/toast';\n\nvar controller = {\n    saveannotations: async function () {\n        const pdfdata = await window.pdfcontroller.getpdfdata();\n        const blob = new Blob([pdfdata], {type: \"application/pdf\"});\n        const data = new FormData();\n        data.append(\"annotations\", blob, \"annotated.pdf\");\n        data.append('submissionid', controller.currentfiledataset.submissionid);\n        data.append('fileid', controller.currentfiledataset.fileid);\n        data.append('filename', controller.currentfiledataset.filename);\n\n        const response = await fetch(\"../../actions/uploadannotatedsubmissionajax.php\", {\n            method: \"POST\",\n            body: data,\n        });\n        const result = await response.json();\n\n        controller.currentfiledataset.annotatedfileurl = result.url;\n        controller.currentfiledataset.annotatedfileid = result.fileid;\n\n        addToast(getString('annotationssaved', 'mod_coursework'), {type: 'success'});\n    },\n\n    loadpdf: async function (dataset) {\n        var url = dataset.href;\n\n        if (dataset.annotatedfileurl) {\n            url = dataset.annotatedfileurl;\n        }\n        controller.currentfiledataset = dataset;\n\n        return window.pdfcontroller.loadpdf(url);\n\n    },\n\n    clearannotations: async function () {\n        Ajax.call([{\n            methodname: 'mod_coursework_clearannotations',\n            args: {\n                submissionid: controller.currentfiledataset.submissionid,\n                fileid: controller.currentfiledataset.annotatedfileid\n            },\n        }])[0]\n            .then(() => {\n                controller.currentfiledataset.annotatedfileurl = '';\n                controller.currentfiledataset.annotatedfileid = '';\n                controller.loadpdf(controller.currentfiledataset);\n                addToast(getString('annotationscleared', 'mod_coursework'), {type: 'success'});\n            })\n            .catch((error) => {\n                addToast(error, {type: 'error'});\n            });\n    },\n\n};\n\n\nexport const init = async () => {\n    prefetchStrings('mod_coursework', [\n        'annotationssaved',\n        'annotationscleared',\n    ]);\n\n    let viewfilebuttons = document.querySelectorAll('[data-action=\"modcoursework_viewfile\"]');\n    viewfilebuttons.forEach((node) => {\n            node.addEventListener(\"click\", async (event) => {\n                await controller.loadpdf(event.target.dataset).promise;\n            });\n        }\n    );\n    if (viewfilebuttons[0]) {\n        await controller.loadpdf(viewfilebuttons[0].dataset).promise;\n    }\n\n    document.querySelector('[data-action=\"modcoursework_saveannotations\"]')\n        .addEventListener(\"click\", async () => {\n            await controller.saveannotations().promise;\n        });\n\n    document.querySelector('[data-action=\"modcoursework_clearannotations\"]')\n        .addEventListener(\"click\", async () => {\n            await controller.clearannotations().promise;\n        });\n\n};\n"],"names":["controller","saveannotations","async","pdfdata","window","pdfcontroller","getpdfdata","blob","Blob","type","data","FormData","append","currentfiledataset","submissionid","fileid","filename","response","fetch","method","body","result","json","annotatedfileurl","url","annotatedfileid","loadpdf","dataset","href","clearannotations","call","methodname","args","then","catch","error","viewfilebuttons","document","querySelectorAll","forEach","node","addEventListener","event","target","promise","querySelector"],"mappings":";;;;;;;0IA4BIA,WAAa,CACbC,gBAAiBC,uBACPC,cAAgBC,OAAOC,cAAcC,aACrCC,KAAO,IAAIC,KAAK,CAACL,SAAU,CAACM,KAAM,oBAClCC,KAAO,IAAIC,SACjBD,KAAKE,OAAO,cAAeL,KAAM,iBACjCG,KAAKE,OAAO,eAAgBZ,WAAWa,mBAAmBC,cAC1DJ,KAAKE,OAAO,SAAUZ,WAAWa,mBAAmBE,QACpDL,KAAKE,OAAO,WAAYZ,WAAWa,mBAAmBG,gBAEhDC,eAAiBC,MAAM,kDAAmD,CAC5EC,OAAQ,OACRC,KAAMV,OAEJW,aAAeJ,SAASK,OAE9BtB,WAAWa,mBAAmBU,iBAAmBF,OAAOG,IACxDxB,WAAWa,mBAAmBY,gBAAkBJ,OAAON,uBAE9C,kBAAU,mBAAoB,kBAAmB,CAACN,KAAM,aAGrEiB,QAASxB,eAAgByB,aACjBH,IAAMG,QAAQC,YAEdD,QAAQJ,mBACRC,IAAMG,QAAQJ,kBAElBvB,WAAWa,mBAAqBc,QAEzBvB,OAAOC,cAAcqB,QAAQF,MAIxCK,iBAAkB3B,+BACT4B,KAAK,CAAC,CACPC,WAAY,kCACZC,KAAM,CACFlB,aAAcd,WAAWa,mBAAmBC,aAC5CC,OAAQf,WAAWa,mBAAmBY,oBAE1C,GACCQ,MAAK,KACFjC,WAAWa,mBAAmBU,iBAAmB,GACjDvB,WAAWa,mBAAmBY,gBAAkB,GAChDzB,WAAW0B,QAAQ1B,WAAWa,oCACrB,kBAAU,qBAAsB,kBAAmB,CAACJ,KAAM,eAEtEyB,OAAOC,uBACKA,MAAO,CAAC1B,KAAM,6BAOnBP,wCACA,iBAAkB,CAC9B,mBACA,2BAGAkC,gBAAkBC,SAASC,iBAAiB,0CAChDF,gBAAgBG,SAASC,OACjBA,KAAKC,iBAAiB,SAASvC,MAAAA,cACrBF,WAAW0B,QAAQgB,MAAMC,OAAOhB,SAASiB,cAIvDR,gBAAgB,UACVpC,WAAW0B,QAAQU,gBAAgB,GAAGT,SAASiB,QAGzDP,SAASQ,cAAc,iDAClBJ,iBAAiB,SAASvC,gBACjBF,WAAWC,kBAAkB2C,WAG3CP,SAASQ,cAAc,kDAClBJ,iBAAiB,SAASvC,gBACjBF,WAAW6B,mBAAmBe"}