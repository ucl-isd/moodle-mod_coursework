{"version":3,"file":"modal_handler_extensions.min.js","sources":["../src/modal_handler_extensions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript module for handling deadline extension modal.\n *\n * @module      mod_coursework/modal_handler_extensions\n * @copyright   2025 UCL\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalForm from 'core_form/modalform';\nimport Notification from 'core/notification';\nimport {getString, getStrings} from 'core/str';\nimport {add as addToast} from 'core/toast';\nimport Ajax from 'core/ajax';\nimport {replaceRow} from 'mod_coursework/modal_grading_table_ui';\nimport Log from 'core/log';\n\nlet courseworkId;\n\n/**\n * Initialize module.\n * @param {number} courseworkid the coursework ID.\n */\nexport const init = (courseworkid) => {\n    courseworkId = courseworkid;\n    // Using table not rows as rows will be re-rendered.\n    const tableSelector = `#mod-coursework-submissions-table-${courseworkId}`;\n    const triggerElement = document.querySelector(tableSelector);\n    const actionSelector = '[data-action=\"mod-coursework-launch-modal-extension\"]';\n    triggerElement.addEventListener('click', event => {\n        const actionMenu = event.target.matches(actionSelector)\n            ? event.target\n            : event.target.closest(actionSelector);\n        const rowElement = event.target.closest('tr');\n        if (actionMenu) {\n            event.preventDefault();\n        } else {\n            // Was not an action menu click.\n            return;\n        }\n        const dataSet = actionMenu.dataset;\n        if (!dataSet.courseworkId ?? null) {\n            // For some reason we do not have the data we need for dynamic form.\n            Log.error('Insufficient data to process extension request.');\n            return;\n        }\n        const args = {\n            courseworkid: courseworkId,\n            allocatableid: dataSet.allocatableId,\n            allocatabletype: dataSet.allocatableType,\n            extensionid: dataSet.extensionId\n        };\n        const modalForm = new ModalForm({\n            modalConfig: {\n                title: getString('extended_deadline', 'mod_coursework'),\n            },\n            formClass: 'mod_coursework\\\\forms\\\\deadline_extension_form',\n            saveButtonText: getString('save', 'core'),\n            returnFocus: triggerElement,\n            args: args\n        });\n\n        // Show a toast notification when the form is submitted.\n        modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, event => {\n            if (event.detail.success) {\n                // Successful submission.\n                if (event.detail.resultcode === 'confirmdelete') {\n                    const strRequests = ['areyousure', 'delete', 'cancel'].map((k) => {\n                        return {key: k, component: 'core'};\n                    });\n                    getStrings(strRequests).then((strings) => {\n                        Notification.confirm(\n                            strings[0],\n                            event.detail.message,\n                            strings[1], // Delete.\n                            strings[2], // Cancel.\n                            async () => {\n                                try {\n                                    const deleteResult = await Ajax.call([{\n                                        methodname: 'mod_coursework_delete_extension',\n                                        args: {\n                                            extensionid: dataSet.extensionId\n                                        }\n                                    }])[0];\n                                    if (deleteResult.success) {\n                                        replaceRow(rowElement, dataSet, deleteResult.message);\n                                    } else if (deleteResult.exception ?? null) {\n                                        addToast(deleteResult.exception.message, {type: 'warning'});\n                                    }\n                                } catch (e) {\n                                    Notification.addNotification({type: 'error', message: e.message});\n                                }\n                            }\n                        );\n                    });\n                } else if (event.detail.resultcode === 'saved') {\n                    try {\n                        replaceRow(rowElement, dataSet, event.detail.message);\n                    } catch (e) {\n                        Notification.addNotification({type: 'error', message: e.message});\n                    }\n                }\n            } else if (event.detail.errors) {\n                Notification.addNotification({\n                    type: 'error',\n                    message: event.detail.errors.join('<br>')\n                });\n            } else if (event.detail.warnings) {\n                const warningMessages = event.detail.warnings.map(warning => warning.message);\n                Notification.addNotification({\n                    type: 'error',\n                    message: warningMessages.join('<br>')\n                });\n            }\n        });\n\n        modalForm.show();\n    });\n};\n"],"names":["courseworkId","courseworkid","tableSelector","triggerElement","document","querySelector","actionSelector","addEventListener","event","actionMenu","target","matches","closest","rowElement","preventDefault","dataSet","dataset","error","args","allocatableid","allocatableId","allocatabletype","allocatableType","extensionid","extensionId","modalForm","ModalForm","modalConfig","title","formClass","saveButtonText","returnFocus","events","FORM_SUBMITTED","detail","success","resultcode","strRequests","map","k","key","component","then","strings","confirm","message","async","deleteResult","Ajax","call","methodname","exception","type","e","addNotification","errors","join","warnings","warningMessages","warning","show"],"mappings":";;;;;;;SA+BIA,gRAMiBC,eACjBD,aAAeC,mBAETC,0DAAqDF,cACrDG,eAAiBC,SAASC,cAAcH,eACxCI,eAAiB,wDACvBH,eAAeI,iBAAiB,SAASC,wCAC/BC,WAAaD,MAAME,OAAOC,QAAQL,gBAClCE,MAAME,OACNF,MAAME,OAAOE,QAAQN,gBACrBO,WAAaL,MAAME,OAAOE,QAAQ,UACpCH,kBACAD,MAAMM,uBAKJC,QAAUN,WAAWO,0CACtBD,QAAQf,8FAELiB,MAAM,yDAGRC,KAAO,CACTjB,aAAcD,aACdmB,cAAeJ,QAAQK,cACvBC,gBAAiBN,QAAQO,gBACzBC,YAAaR,QAAQS,aAEnBC,UAAY,IAAIC,mBAAU,CAC5BC,YAAa,CACTC,OAAO,kBAAU,oBAAqB,mBAE1CC,UAAW,iDACXC,gBAAgB,kBAAU,OAAQ,QAClCC,YAAa5B,eACbe,KAAMA,OAIVO,UAAUlB,iBAAiBkB,UAAUO,OAAOC,gBAAgBzB,WACpDA,MAAM0B,OAAOC,YAEmB,kBAA5B3B,MAAM0B,OAAOE,WAAgC,OACvCC,YAAc,CAAC,aAAc,SAAU,UAAUC,KAAKC,IACjD,CAACC,IAAKD,EAAGE,UAAW,+BAEpBJ,aAAaK,MAAMC,gCACbC,QACTD,QAAQ,GACRnC,MAAM0B,OAAOW,QACbF,QAAQ,GACRA,QAAQ,IACRG,8CAEcC,mBAAqBC,cAAKC,KAAK,CAAC,CAClCC,WAAY,kCACZhC,KAAM,CACFK,YAAaR,QAAQS,gBAEzB,GACAuB,aAAaZ,+CACFtB,WAAYE,QAASgC,aAAaF,uCACtCE,aAAaI,kFACXJ,aAAaI,UAAUN,QAAS,CAACO,KAAM,YAEtD,MAAOC,yBACQC,gBAAgB,CAACF,KAAM,QAASP,QAASQ,EAAER,sBAKrE,GAAgC,UAA5BrC,MAAM0B,OAAOE,sDAELvB,WAAYE,QAASP,MAAM0B,OAAOW,SAC/C,MAAOQ,yBACQC,gBAAgB,CAACF,KAAM,QAASP,QAASQ,EAAER,gBAG7D,GAAIrC,MAAM0B,OAAOqB,6BACPD,gBAAgB,CACzBF,KAAM,QACNP,QAASrC,MAAM0B,OAAOqB,OAAOC,KAAK,eAEnC,GAAIhD,MAAM0B,OAAOuB,SAAU,OACxBC,gBAAkBlD,MAAM0B,OAAOuB,SAASnB,KAAIqB,SAAWA,QAAQd,gCACxDS,gBAAgB,CACzBF,KAAM,QACNP,QAASa,gBAAgBF,KAAK,cAK1C/B,UAAUmC"}